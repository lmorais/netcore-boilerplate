# Estágios da pipeline, de ponta-a-ponta
stages:
  - compile
  - analysis
  - test
  - build
  - push
  - retag
  - deploy

variables:
  PROJECT_DIR: "net.core.api.boilerplate"
  SONAR_URL: "https://sonar.tcp.com.br:9443"
  SONAR_PROJECT_KEY: "net.core.api.boilerplate.Key"

# Compila o projeto e gera os artefatos
compile:
  stage: compile
  image: microsoft/dotnet:2.2-sdk
  script:
    - cd $PROJECT_DIR
    - dotnet restore --configfile Nuget.config
    - dotnet build -c Release -o ./artifacts
  artifacts:
    paths:
      - $PROJECT_DIR/artifacts
  only:
    - merge_requests
    - /^feat-.*$/
    - /^staging$/
    - /^release$/

# Realiza análise de código com o SonarQube
sonar:
  stage: analysis
  image: registry.gitlab.com/terminal-cp/tcp.dockerfile.sonarscanner:latest
  script:
    - cd $PROJECT_DIR
    - dotnet restore
    - dotnet sonarscanner begin /k:"$SONAR_PROJECT_KEY" /d:sonar.host.url="$SONAR_URL" /d:sonar.login="$GL_SONAR_LOGIN" /d:sonar.gitlab.ref_name="$CI_COMMIT_REF_NAME" /d:sonar.gitlab.commit_sha="$CI_COMMIT_SHA" /d:sonar.gitlab.project_id="$CI_PROJECT_PATH" /d:sonar.gitlab.failure_notification_mode=exit-code
    - dotnet build
    - dotnet sonarscanner end /d:sonar.login="$SONAR_LOGIN"
    - if curl -qsG "$SONAR_URL"/api/qualitygates/project_status\?projectKey="$SONAR_PROJECT_KEY" | jq -r .projectStatus.status | grep -q "ERROR"; then exit 1; fi
  only:
    - /^feat-.*$/

# Executa os testes unitários
unit:
  stage: test
  image: microsoft/dotnet:2.2-sdk
  script:
    - "true"
  dependencies:
    - compile
  only:
    - merge_requests
    - /^feat-.*$/
    - /^staging$/
    - /^release$/

# Executa os testes de integração/api
# Usa estratégia de docker-in-docker com docker-compose
integration:
  stage: test
  image: tmaier/docker-compose:latest
  script:
    - "true"
    # - docker-compose up -d
    # - sleep 10 # PostgreSQL leva algum tempo até estar pronto para uso
  only:
    - merge_requests
    - /^staging$/
    - /^release$/

# Constrói a imagem Docker
build:
  stage: build
  # image: docker
  script:
    - "true"
  only:
    - merge_requests
    - /^staging$/
    - /^release$/

# Envia image Docker ao registry do GitLab
push:
  stage: push
  # image: docker
  script:
    - "true"
  only:
    - /^staging$/
    - /^release$/

# Altera tag da imagem do serviço para "production-ready"
retag:
  stage: retag
  # image: ???
  script:
    - "true"
  only:
    - master

# Faz deploy da imagem para o ambiente de produção
deploy:
  stage: deploy
  # image: ???
  script:
    - "true"
  only:
    - master
